{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Edcast\\\\Desktop\\\\inotebook\\\\inotebook\\\\src\\\\components\\\\context\\\\notes\\\\noteState.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport NoteContext from \"./noteContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NoteState = props => {\n  _s();\n  const host = \"http://localhost:5000\";\n  const notesInitial = [];\n  const [Notes, setNotes] = useState(notesInitial);\n  //Get Note\n  const getNotes = async () => {\n    //API calls\n    const response = await fetch(`${host}/api/notes/fetchallnote`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\": localStorage.getItem('token')\n      }\n    });\n    const json = await response.json();\n    setNotes(json);\n  };\n  //Add Note\n  const addNote = async (title, description, tag) => {\n    //API calls\n    const response = await fetch(`${host}/api/notes/addnotes`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\": localStorage.getItem('token')\n      },\n      body: JSON.stringify({\n        title,\n        description,\n        tag\n      })\n    });\n\n    //logic to add notes\n    const note = await response.json();\n    setNotes(Notes.concat(note));\n  };\n\n  //Delete Note\n  const deleteNote = async id => {\n    const response = await fetch(`${host}/api/notes/deletenotes/${id}`, {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\": localStorage.getItem('token')\n      }\n    });\n    const json = response.json();\n    console.log(json);\n    const newNotes = Notes.filter(note => {\n      return note._id !== id;\n    });\n    setNotes(newNotes);\n  };\n\n  //Edit Note\n  const editNote = async (id, title, description, tag) => {\n    //API calls\n\n    const response = await fetch(`${host}/api/notes/updatenotes/${id}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\": localStorage.getItem('token')\n      },\n      body: JSON.stringify({\n        title,\n        description,\n        tag\n      })\n    });\n    const json = response.json();\n    console.log(json);\n    let newNotes = JSON.parse(JSON.stringify(Notes)); //it will make the copy of notes since react finds it difficult to show the newstate of component\n    //Logic to edit notes\n    for (let index = 0; index < newNotes.length; index++) {\n      const element = newNotes[index];\n      if (element._id === id) {\n        newNotes[index].title = title;\n        newNotes[index].description = description;\n        newNotes[index].tag = tag;\n        break;\n      }\n    }\n    setNotes(newNotes);\n  };\n  return /*#__PURE__*/_jsxDEV(NoteContext.Provider, {\n    value: {\n      Notes,\n      addNote,\n      deleteNote,\n      editNote,\n      getNotes\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 9\n  }, this);\n};\n_s(NoteState, \"yT08nag2ZM+xdjNwAVlDuMCfZDA=\");\n_c = NoteState;\nexport default NoteState;\nvar _c;\n$RefreshReg$(_c, \"NoteState\");","map":{"version":3,"names":["useState","NoteContext","jsxDEV","_jsxDEV","NoteState","props","_s","host","notesInitial","Notes","setNotes","getNotes","response","fetch","method","headers","localStorage","getItem","json","addNote","title","description","tag","body","JSON","stringify","note","concat","deleteNote","id","console","log","newNotes","filter","_id","editNote","parse","index","length","element","Provider","value","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Edcast/Desktop/inotebook/inotebook/src/components/context/notes/noteState.js"],"sourcesContent":["import { useState } from \"react\";\r\nimport NoteContext from \"./noteContext\";\r\n\r\n\r\nconst NoteState = (props)=>{\r\n  const host = \"http://localhost:5000\"\r\n    const notesInitial =[]\r\n\r\n      const [Notes, setNotes] = useState(notesInitial)\r\n         //Get Note\r\n         const getNotes = async()=>{\r\n          //API calls\r\n          const response = await fetch(`${host}/api/notes/fetchallnote`, {\r\n            method: \"GET\",\r\n        \r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n              \"auth-token\":localStorage.getItem('token')\r\n            },\r\n        \r\n            });\r\n          const json = await response.json();\r\n          setNotes(json)\r\n        \r\n    \r\n          }\r\n      //Add Note\r\n      const addNote = async(title,description,tag)=>{\r\n      //API calls\r\n      const response = await fetch(`${host}/api/notes/addnotes`, {\r\n        method: \"POST\",\r\n    \r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          \"auth-token\":localStorage.getItem('token')\r\n        },\r\n    \r\n        body: JSON.stringify({ title, description , tag }),\r\n      });\r\n      \r\n      //logic to add notes\r\n        const note= await response.json();\r\n        setNotes(Notes.concat(note))\r\n\r\n      }\r\n\r\n      //Delete Note\r\n      const deleteNote =async (id)=>{\r\n        const response = await fetch(`${host}/api/notes/deletenotes/${id}`, {\r\n          method: \"DELETE\",\r\n      \r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            \"auth-token\":localStorage.getItem('token')\r\n          },\r\n      \r\n        });\r\n        const json =  response.json();\r\n        console.log(json);\r\n        const newNotes= Notes.filter((note)=>{return note._id!==id})\r\n        setNotes(newNotes)\r\n\r\n        \r\n      }\r\n\r\n      //Edit Note\r\n      const editNote = async (id , title, description , tag)=>{\r\n      //API calls\r\n      \r\n        const response = await fetch(`${host}/api/notes/updatenotes/${id}`, {\r\n          method: \"PUT\",\r\n      \r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            \"auth-token\":localStorage.getItem('token')\r\n          },\r\n      \r\n          body: JSON.stringify({ title, description , tag                                                                           }),\r\n        });\r\n        const json =  response.json();\r\n        console.log(json);\r\n      \r\n      \r\n        let newNotes = JSON.parse(JSON.stringify(Notes)) //it will make the copy of notes since react finds it difficult to show the newstate of component\r\n      //Logic to edit notes\r\n        for (let index = 0; index < newNotes.length; index++) {\r\n          const element = newNotes[index];\r\n          if(element._id === id){\r\n            newNotes[index].title = title;\r\n            newNotes[index].description = description;\r\n            newNotes[index].tag = tag;\r\n            break;\r\n          }\r\n          \r\n        }\r\n        setNotes(newNotes);\r\n      }\r\n    return(\r\n\r\n        <NoteContext.Provider value={{Notes,addNote,deleteNote,editNote,getNotes}}>\r\n            {props.children}\r\n        </NoteContext.Provider>\r\n\r\n        \r\n    )\r\n}\r\nexport default NoteState;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}